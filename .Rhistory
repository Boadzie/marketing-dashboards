install.packages("tidyverse")
install.packages("rvest")
install.packages("httr")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
f ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
f ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
f ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
f ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
f ("package:h2o" %in% search()) {
detach("package:h2o", unload=TRUE)
}
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R")))
library(h2o)
localH2O = h2o.init()
demo(h2o.kmeans)
library(h2o)
localH2O = h2o.init()
demo(h2o.kmeans)
library(h2o)
localH2O = h2o.init()
demo(h2o.kmeans)
localH2O = h2o.init()
demo(h2o.kmeans)
localH2O = h2o.init()
demo(h2o.kmeans)
install.packages("tidyverse")
install.packages("tidyverse")
r
install.packages("parsnip")
install.packages("tidyverse")
install.packages("haven")
install.packages("config")
install.packages("haven")
install.packages("tidyverse")
install.packages("plotly")
install.packages("highcharter")
install.packages(c("yardstick", "reticulate", "shinydashboard" "recipes"))
install.packages(c("yardstick", "reticulate", "shinydashboard", "recipes"))
install.packages(c("bs4dash", "argondash", "semantic.dashboard", "shiny.themes"))
install.packages("bs4Dash")
install.packages("semantic.dashboard")
install.packages("tidyquant")
install.packages(c("anomalize", "igraph", "xgboost"))
install.packages("tensorflow")
install.packages("tidytext")
install.packages("profvis")
install.packages("shinytest")
install.packages("shinythemes")
install.packages("dt")
install.packages("DT")
install.packages("dygraphs")
thelist <- list(A=matrix(1:19, 3, B=1:5, C=1:4, D=2))
thelist <- list(A=matrix(1:19, 3, B=1:5, C=matrix(1:4, 2), D=2))
thelist <- list(A= matrix(1:9, 3), B=1:5, C=matrix(1:4, 2), D=2)
lapply(thelist, sum)
library(purrr)
thelist %>% map(mean)
# the ints
thelist %>% map_int(nrow)
# the ints
thelist %>% map_int(NROW)
?NROW
library(ggplot2)
labs(title = paste("Fuel efficiency decrease with engine size")
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class)) +
geom_smooth(se=FALSE) +
labs(title = paste("Fuel efficiency decrease with e
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class)) +
geom_smooth(se=FALSE) +
labs(title = paste("Fuel efficiency decrease with engine size")
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class)) +
geom_smooth(se=FALSE) +
labs(title = "Fuel efficiency decrease with engine size")
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class)) +
geom_smooth(se=FALSE) +
labs(title = "Fuel efficiency decrease with engine size",
subtitle = paste(
"Two seaters (sports cars) are an exception"
"because of their light weight",
)
caption = "Data from fueleconomy.gov")
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class)) +
geom_smooth(se=FALSE) +
labs(title = "Fuel efficiency decrease with engine size",
subtitle = paste(
"Two seaters (sports cars) are an exception"
"because of their light weight",
)
caption = "Data from fueleconomy.gov"
)
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class)) +
geom_smooth(se=FALSE) +
labs(title = "Fuel efficiency decrease with engine size",
subtitle = paste(
"Two seaters (sports cars) are an exception"
"because of their light weight"),
caption = "Data from fueleconomy.gov"
)
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class)) +
geom_smooth(se=FALSE) +
labs(title = "Fuel efficiency decrease with engine size",
subtitle = paste("Two seaters (sports cars) are an exception"
"because of their light weight"),
caption = "Data from fueleconomy.gov"
)
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class)) +
geom_smooth(se=FALSE) +
labs(title = "Fuel efficiency decrease with engine size",
subtitle = paste("Two seaters (sports cars) are an exception"
"because of their light weight"),
caption = "Data from fueleconomy.gov"
)
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class)) +
geom_smooth(se=FALSE) +
labs(title = "Fuel efficiency decrease with engine size",
subtitle = paste("Two seaters (sports cars) are an exception"
"because of their light weight"),
caption = "Data from fueleconomy.gov"
)
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class)) +
geom_smooth(se=FALSE) +
labs(title = "Fuel efficiency decrease with engine size",
subtitle = "Two seaters (sports cars) are an exception"
"because of their light weight",
caption = "Data from fueleconomy.gov"
)
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class)) +
geom_smooth(se=FALSE) +
labs(title = "Fuel efficiency decrease with engine size"
)
ggplot(mpg, aes(x=displ, y=hwy)) +
geom_point(aes(color=class)) +
geom_smooth(se=FALSE) +
labs(title = "Fuel efficiency decrease with engine size",
subtitle = "some more information now",
caption = "data is from UCLA dataset"
)
install.packages(c("broom", "callr", "fracdiff", "h2o", "prettyunits", "RcppArmadillo", "rlang", "tidyquant", "tidyr", "tidyselect", "vctrs", "yardstick"))
setwd("~/Documents/Dev_master/R_projects/marketing/marketing_dash")
library(flexdashboard)
library(tidyverse)
library(plotly)
library(DT)
library(lubridate)
timeSeriesNumInvoices <- df %>%
group_by(InvoiceDate=floor_date(InvoiceDate, "month")) %>%
summarise(NumOrders=n_distinct(InvoiceNo))
# Loadding the data
df <- read_excel('~/Documents/Dev_master/R_projects/marketing/marketing_dash/data/Online-Retail.xlsx')
library(readxl)
df$Sales <- df$Quantity * df$UnitPrice
library(lubridate)
df$Sales <- df$Quantity * df$UnitPrice
library(lubridate)
library(lubridate)
df$Sales <- df$Quantity * df$UnitPrice
library(readxl)
# Loadding the data
df <- read_excel('~/Documents/Dev_master/R_projects/marketing/marketing_dash/data/Online-Retail.xlsx')
library(lubridate)
df$Sales <- df$Quantity * df$UnitPrice
timeSeriesRevenue <- df %>%
group_by(InvoiceDate=floor_date(InvoiceDate, "month")) %>%
summarise(Sales=sum(Sales))
# the plot
d <- ggplot(timeSeriesRevenue, aes(x=InvoiceDate, y=Sales)) +
geom_line() +
ylim(c(0, max(timeSeriesRevenue$Sales) + 10000)) +
ylab("sales") +
xlab("date") +
ggtitle("Revenue over Time") +
theme(plot.title=element_text(hjust=0.5))
ggplotly()
timeSeriesRepeatCustomers$Perc <- timeSeriesRepeatCustomers$Sales / timeSeriesRevenue$Sales*100.0
# Unique Customers
timeSeriesUniqCustomers <- df %>%
group_by(InvoiceDate=floor_date(InvoiceDate, "month")) %>%
summarise(Count=n_distinct(CustomerID))
timeSeriesRepeatCustomers$Perc <- timeSeriesRepeatCustomers$Sales / timeSeriesRevenue$Sales*100.0
timeSeriesRepeatCustomers <- repeatCustomers %>%
group_by(InvoiceDate) %>%
summarise(Count=n_distinct(CustomerID), Sales=sum(Sales))
repeatCustomers <- na.omit(timeSeriesCustomerDF[which(timeSeriesCustomerDF$Count > 1),])
timeSeriesCustomerDF <- invoiceCustomerDF %>%
group_by(InvoiceDate=floor_date(InvoiceDate, "month"), CustomerID) %>%
summarise(Count=n_distinct(InvoiceNo), Sales=sum(Sales))
invoiceCustomerDF <- df %>%
group_by(InvoiceNo, InvoiceDate) %>%
summarise(CustomerID=max(CustomerID), Sales=sum(Sales))
timeSeriesCustomerDF <- invoiceCustomerDF %>%
group_by(InvoiceDate=floor_date(InvoiceDate, "month"), CustomerID) %>%
summarise(Count=n_distinct(InvoiceNo), Sales=sum(Sales))
repeatCustomers <- na.omit(timeSeriesCustomerDF[which(timeSeriesCustomerDF$Count > 1),])
timeSeriesRepeatCustomers <- repeatCustomers %>%
group_by(InvoiceDate) %>%
summarise(Count=n_distinct(CustomerID), Sales=sum(Sales))
# Unique Customers
timeSeriesUniqCustomers <- df %>%
group_by(InvoiceDate=floor_date(InvoiceDate, "month")) %>%
summarise(Count=n_distinct(CustomerID))
timeSeriesRepeatCustomers$Perc <- timeSeriesRepeatCustomers$Sales / timeSeriesRevenue$Sales*100.0
timeSeriesRepeatCustomers$Total <- timeSeriesUniqCustomers$Count
q <- ggplot(timeSeriesRepeatCustomers) +
geom_line(aes(x=InvoiceDate, y=Total), stat="identity", color="navy") +
geom_line(aes(x=InvoiceDate, y=Count), stat="identity", color="orange") +
geom_bar(aes(x=InvoiceDate, y=Perc*20), stat="identity", fill='gray', alpha=0.5) +
scale_y_continuous(sec.axis = sec_axis(~./20, name="Percentage (%)")) +
ggtitle("Number of Unique vs. Repeat & Revenue from Repeat Customers") +
theme(plot.title=element_text(hjust=0.5))
ggplotly(q)
invoiceCustomerDF <- df %>%
group_by(InvoiceNo, InvoiceDate) %>%
summarise(CustomerID=max(CustomerID), Sales=sum(Sales))
timeSeriesCustomerDF <- invoiceCustomerDF %>%
group_by(InvoiceDate=floor_date(InvoiceDate, "month"), CustomerID) %>%
summarise(Count=n_distinct(InvoiceNo), Sales=sum(Sales))
repeatCustomers <- na.omit(timeSeriesCustomerDF[which(timeSeriesCustomerDF$Count > 1),])
timeSeriesRepeatCustomers <- repeatCustomers %>%
group_by(InvoiceDate) %>%
summarise(Count=n_distinct(CustomerID), Sales=sum(Sales))
# Unique Customers
timeSeriesUniqCustomers <- df %>%
group_by(InvoiceDate=floor_date(InvoiceDate, "month")) %>%
summarise(Count=n_distinct(CustomerID))
timeSeriesRepeatCustomers$Perc <- timeSeriesRepeatCustomers$Sales / timeSeriesRevenue$Sales*100.0
timeSeriesRepeatCustomers$Total <- timeSeriesUniqCustomers$Count
q <- ggplot(timeSeriesRepeatCustomers) +
geom_line(aes(x=InvoiceDate, y=Total), stat="identity", color="navy") +
geom_line(aes(x=InvoiceDate, y=Count), stat="identity", color="green") +
geom_bar(aes(x=InvoiceDate, y=Perc*20), stat="identity", fill='gray', alpha=0.5) +
scale_y_continuous(sec.axis = sec_axis(~./20, name="Percentage (%)")) +
ggtitle("Number of Unique vs. Repeat & Revenue from Repeat Customers") +
theme(plot.title=element_text(hjust=0.5))
ggplotly(q)
invoiceCustomerDF <- df %>%
group_by(InvoiceNo, InvoiceDate) %>%
summarise(CustomerID=max(CustomerID), Sales=sum(Sales))
timeSeriesCustomerDF <- invoiceCustomerDF %>%
group_by(InvoiceDate=floor_date(InvoiceDate, "month"), CustomerID) %>%
summarise(Count=n_distinct(InvoiceNo), Sales=sum(Sales))
repeatCustomers <- na.omit(timeSeriesCustomerDF[which(timeSeriesCustomerDF$Count > 1),])
timeSeriesRepeatCustomers <- repeatCustomers %>%
group_by(InvoiceDate) %>%
summarise(Count=n_distinct(CustomerID), Sales=sum(Sales))
# Unique Customers
timeSeriesUniqCustomers <- df %>%
group_by(InvoiceDate=floor_date(InvoiceDate, "month")) %>%
summarise(Count=n_distinct(CustomerID))
timeSeriesRepeatCustomers$Perc <- timeSeriesRepeatCustomers$Sales / timeSeriesRevenue$Sales*100.0
timeSeriesRepeatCustomers$Total <- timeSeriesUniqCustomers$Count
q <- ggplot(timeSeriesRepeatCustomers) +
geom_line(aes(x=InvoiceDate, y=Total), stat="identity", color="navy") +
geom_line(aes(x=InvoiceDate, y=Count), stat="identity", color="green") +
geom_bar(aes(x=InvoiceDate, y=Perc*20), stat="identity", fill=' #625b64
', alpha=0.5) +
scale_y_continuous(sec.axis = sec_axis(~./20, name="Percentage (%)")) +
ggtitle("Number of Unique vs. Repeat & Revenue from Repeat Customers") +
theme(plot.title=element_text(hjust=0.5))
ggplotly(q)
invoiceCustomerDF <- df %>%
group_by(InvoiceNo, InvoiceDate) %>%
summarise(CustomerID=max(CustomerID), Sales=sum(Sales))
timeSeriesCustomerDF <- invoiceCustomerDF %>%
group_by(InvoiceDate=floor_date(InvoiceDate, "month"), CustomerID) %>%
summarise(Count=n_distinct(InvoiceNo), Sales=sum(Sales))
repeatCustomers <- na.omit(timeSeriesCustomerDF[which(timeSeriesCustomerDF$Count > 1),])
timeSeriesRepeatCustomers <- repeatCustomers %>%
group_by(InvoiceDate) %>%
summarise(Count=n_distinct(CustomerID), Sales=sum(Sales))
# Unique Customers
timeSeriesUniqCustomers <- df %>%
group_by(InvoiceDate=floor_date(InvoiceDate, "month")) %>%
summarise(Count=n_distinct(CustomerID))
timeSeriesRepeatCustomers$Perc <- timeSeriesRepeatCustomers$Sales / timeSeriesRevenue$Sales*100.0
timeSeriesRepeatCustomers$Total <- timeSeriesUniqCustomers$Count
q <- ggplot(timeSeriesRepeatCustomers) +
geom_line(aes(x=InvoiceDate, y=Total), stat="identity", color="navy") +
geom_line(aes(x=InvoiceDate, y=Count), stat="identity", color="green") +
geom_bar(aes(x=InvoiceDate, y=Perc*20), stat="identity", fill='darkgrey', alpha=0.5) +
scale_y_continuous(sec.axis = sec_axis(~./20, name="Percentage (%)")) +
ggtitle("Number of Unique vs. Repeat & Revenue from Repeat Customers") +
theme(plot.title=element_text(hjust=0.5))
ggplotly(q)
popularItems <- df %>%
group_by(InvoiceDate=floor_date(InvoiceDate, "month"), StockCode) %>%
summarise(Quantity=sum(Quantity))
top5Items <- popularItems[which(popularItems$InvoiceDate == as.Date("2011-11-01")),
] %>%
arrange(desc(Quantity)) %>%
head(5)
timeSeriesTop5 <- popularItems[
which(popularItems$StockCode %in% top5Items$StockCode),
]
w <- ggplot(timeSeriesTop5, aes(x=InvoiceDate, y=Quantity, color=StockCode)) +
geom_line() +
ylab("number of purchases") +
xlab("date") +
ggtitle("Top 5 Popular Items over Time") +
theme(plot.title=element_text(hjust=0.5))
popularItems <- df %>%
group_by(InvoiceDate=floor_date(InvoiceDate, "month"), StockCode) %>%
summarise(Quantity=sum(Quantity))
top5Items <- popularItems[which(popularItems$InvoiceDate == as.Date("2011-11-01")),
] %>%
arrange(desc(Quantity)) %>%
head(5)
timeSeriesTop5 <- popularItems[
which(popularItems$StockCode %in% top5Items$StockCode),
]
w <- ggplot(timeSeriesTop5, aes(x=InvoiceDate, y=Quantity, color=StockCode)) +
geom_line() +
ylab("number of purchases") +
xlab("date") +
ggtitle("Top 5 Popular Items over Time") +
theme(plot.title=element_text(hjust=0.5))
ggplotly(w)
