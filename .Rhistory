install.packages("tidyverse")
install.packages("rvest")
install.packages("httr")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
f ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
f ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
f ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
f ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
f ("package:h2o" %in% search()) {
detach("package:h2o", unload=TRUE)
}
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R")))
library(h2o)
localH2O = h2o.init()
demo(h2o.kmeans)
library(h2o)
localH2O = h2o.init()
demo(h2o.kmeans)
library(h2o)
localH2O = h2o.init()
demo(h2o.kmeans)
localH2O = h2o.init()
demo(h2o.kmeans)
localH2O = h2o.init()
demo(h2o.kmeans)
install.packages("tidyverse")
install.packages("tidyverse")
r
install.packages("parsnip")
install.packages("tidyverse")
install.packages("haven")
install.packages("config")
install.packages("haven")
install.packages("tidyverse")
install.packages("plotly")
install.packages("highcharter")
install.packages(c("yardstick", "reticulate", "shinydashboard" "recipes"))
install.packages(c("yardstick", "reticulate", "shinydashboard", "recipes"))
install.packages(c("bs4dash", "argondash", "semantic.dashboard", "shiny.themes"))
install.packages("bs4Dash")
install.packages("semantic.dashboard")
install.packages("tidyquant")
install.packages(c("anomalize", "igraph", "xgboost"))
install.packages("tensorflow")
install.packages("tidytext")
install.packages("profvis")
install.packages("shinytest")
install.packages("shinythemes")
install.packages("dt")
install.packages("DT")
install.packages("dygraphs")
thelist <- list(A=matrix(1:19, 3, B=1:5, C=1:4, D=2))
thelist <- list(A=matrix(1:19, 3, B=1:5, C=matrix(1:4, 2), D=2))
thelist <- list(A= matrix(1:9, 3), B=1:5, C=matrix(1:4, 2), D=2)
lapply(thelist, sum)
library(purrr)
thelist %>% map(mean)
# the ints
thelist %>% map_int(nrow)
# the ints
thelist %>% map_int(NROW)
?NROW
library(flexdashboard)
library(tidyverse)
library(plotly)
library(DT)
conversionsDF <- read.csv(file="~/Documents/Dev_master/R_projects/marketing/marketing_dash/data/bank-additional-full.csv",
header=TRUE,
sep=";"
)
# Encode conversions as 0s and 1s
conversionsDF$conversion <- as.integer(conversionsDF$y) - 1
# total number of conversions
total <- sum(conversionsDF$conversion)
# total number of clients in the data
client <- nrow(conversionsDF)
# the percentage
percentage <- round(total / client * 100, 2)
# the data table
#data <- head(conversionsDF)
#datatable(data)
conversionsDF <- read.csv(file="~/Documents/Dev_master/R_projects/marketing/marketing_dash/data/bank-additional-full.csv",
header=TRUE,
sep=";"
)
# Encode conversions as 0s and 1s
conversionsDF$conversion <- as.integer(conversionsDF$y) - 1
# total number of conversions
total <- sum(conversionsDF$conversion)
# total number of clients in the data
client <- nrow(conversionsDF)
# the percentage
percentage <- round(total / client * 100, 2)
# the data table
#data <- head(conversionsDF)
#datatable(data)
setwd("~/Documents/Dev_master/R_projects/marketing/marketing_dash")
library(flexdashboard)
library(tidyverse)
library(plotly)
library(DT)
# the percentage
percentage <- round(total / client * 100, 2)
valueBox(total, icon = "fa-pencil",  caption = "Total conversion", color = "red")
valueBox(client, icon = "fa-users",  caption = "Total no. customers", color = "green")
valueBox(percentage, icon = "fa-percent",  caption = "Conversion %", color = "yellow")
